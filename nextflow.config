profiles {

    docker {
        docker.enabled = true
    }

}

// Default max resources available
params {
    max_cpus = 2
    max_memory = '5.GB'
}

// Specify process resource requests
process {
    debug = true

    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }

    // Process-specific resource requirements
    withLabel:process_low {
        cpus = { check_max( 2, 'cpus' ) }
        memory = { check_max( 2.GB, 'memory' ) }
    }

    withLabel:process_medium {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 5.GB, 'memory' ) }
    }
}

// Function to ensure that resource requirements don't go beyond a maximum limit
// This code is from: https://github.com/nf-core/rnaseq/blob/3643a94411b65f42bce5357c5015603099556ad9/nextflow.config
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}